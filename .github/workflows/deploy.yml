name: Deploy to Anonim.in

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest

    env:
      DOCKER_HUB_USERNAME: ${{ secrets.DOCKER_HUB_USERNAME }}
      DOCKER_HUB_PASSWORD: ${{ secrets.DOCKER_HUB_PASSWORD }}
      SSH_HOST: ${{ secrets.SSH_HOST }}
      SSH_USER: ${{ secrets.SSH_USER }}
      SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
      DB_HOST: ${{ secrets.DB_HOST }}
      DB_USER: ${{ secrets.DB_USER }}
      DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
      DB_NAME: ${{ secrets.DB_NAME }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ env.DOCKER_HUB_USERNAME }}
          password: ${{ env.DOCKER_HUB_PASSWORD }}

      - name: Build and push Docker image
        run: |
          docker build -t ${{ env.DOCKER_HUB_USERNAME }}/anonim-server .
          docker push ${{ env.DOCKER_HUB_USERNAME }}/anonim-server

      - name: Add SSH key
        uses: webfactory/ssh-agent@v0.5.3
        with:
          ssh-private-key: ${{ env.SSH_PRIVATE_KEY }}

      - name: Create directory on EC2 instance
        run: |
          ssh -o StrictHostKeyChecking=no ${{ env.SSH_USER }}@${{ env.SSH_HOST }} "mkdir -p /home/ubuntu/app"

      - name: Sync docker-compose files
        run: |
          scp -o StrictHostKeyChecking=no docker-compose.backend.yml ${{ env.SSH_USER }}@${{ env.SSH_HOST }}:/home/ubuntu/app/docker-compose.backend.yml

      - name: Set up SSH key
        run: |
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ssh_key
          chmod 600 ssh_key

      - name: Deploy to EC2
        run: |
          ssh -o StrictHostKeyChecking=no -i ssh_key ${{ env.SSH_USER }}@${{ env.SSH_HOST }} << EOF
            export DOCKER_HUB_USERNAME=${{ env.DOCKER_HUB_USERNAME }}
            export DB_HOST=${{ env.DB_HOST }}
            export DB_USER=${{ env.DB_USER }}
            export DB_NAME=${{ env.DB_NAME }}
            export DB_PASSWORD=${{ env.DB_PASSWORD }}
            docker rm -f anonim-server
            docker rmi ${{ env.DOCKER_HUB_USERNAME }}/anonim-server
            docker-compose -f /home/ubuntu/app/docker-compose.backend.yml pull
            docker-compose -f /home/ubuntu/app/docker-compose.backend.yml -p anonim-server up -d
          EOF

      - name: Clean up
        run: rm ssh_key
